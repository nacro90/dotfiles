#+TITLE: normacs
#+DESCRIPTION: A well documented configuration file for emacs. Powered by Org.
#+AUTHOR: nacro90
#+DATE: <2019-12-08 Sun>
#+TODO: EXPLAIN CONFIGURE FIX(f/@) DONE
#+STARTUP: indent

Productivity comes from habit. If you feel that your habit is pulling
you back, then its time to get new shiny tools to build new shiny
habits onto.


* Setup

** Editing this file must be easy!

#+BEGIN_SRC emacs-lisp :results output silent

(defun find-config ()
  "Edit config.org"
  (interactive)
  (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c I") 'find-config)

#+END_SRC



** Package sources

Add repositories from which we'll load packages. I prefer to live on
the bleeding edge so have only enabled melpa. Setting
=package-enable-at-startup= to =nil= prevents a second package load
and slightly improves startup time.

#+BEGIN_SRC emacs-lisp :results output silent

  (custom-set-variables 
   '(package-enable-at-startup nil)
   '(package-archives '(("gnu" . "http://mirrors.163.com/elpa/gnu/")
                        ("melpa" . "https://melpa.org/packages/")
                        ("org" . "http://orgmode.org/elpa/"))))

#+END_SRC


** Initialize ~use-package~

#+BEGIN_QUOTE
The ~use-package~ macro allows you to isolate package configuration in
your .emacs file in a way that is both performance-oriented and, well,
tidy. I created it because I have over 80 packages that I use in
Emacs, and things were getting difficult to manage. Yet with this
utility my total load time is around 2 seconds, with no loss of
functionality!
#+END_QUOTE

If ~use-package~ is not installed, install it.

#+BEGIN_SRC emacs-lisp :results output silent

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)
    (eval-when-compile (require 'use-package)))

#+END_SRC

By default all packages should be installed from package manager as
that's the usual path. This is equivalent to setting ~:ensure t~ on
each call to ~use-package~. To disable set ~:ensure nil~ (this is done
automatically for any packages using ~:load-path~ so shouldn't
generally be needed).

#+BEGIN_SRC emacs-lisp :results output silent

  (customize-set-value 'use-package-always-ensure t)

#+END_SRC


* Appearance

** Themes

*** Night Owl

I want something blue...
   
#+BEGIN_SRC emacs-lisp :results output silent

(use-package night-owl-theme
  :config
  (load-theme 'night-owl t))

#+END_SRC


*** Solarized

Solarized is my favorite colorscheme for once.

#+BEGIN_SRC emacs-lisp :results output silent

(use-package solarized-theme
  :disabled
  :config
  (load-theme 'solarized-light t))

#+END_SRC



** CONFIGURE Focus mode via ~darkroom~

#+BEGIN_SRC emacs-lisp :results output silent

  (defun toggle-numbers-depending-on-global-status ()
    "Toggles the display line number mode depending on global display line numbers"
    (if global-display-line-numbers-mode 
        (if display-line-numbers-mode 	
            (display-line-numbers-mode 0)  
            (display-line-numbers-mode 1))))


      (use-package darkroom
        :config
        (add-hook 'darkroom-mode-hook 'toggle-numbers-depending-on-global-status) ; Configure hook to hide line numbers
        (add-hook 'darkroom-tentative-mode-hook 'toggle-numbers-depending-on-global-status)) ; Configure hook to hide line numbers

#+END_SRC


** Disable unnecessary elements

- Disable startup screen

  #+BEGIN_SRC emacs-lisp :results output silent

  (customize-set-value 'inhibit-startup-screen t)
  
  #+END_SRC
  
- Disable scroll bar
  
  #+BEGIN_SRC emacs-lisp :results output silent
  
  (customize-set-variable 'scroll-bar-mode nil)
  
  #+END_SRC
  
- Disable menu bar
  
  #+BEGIN_SRC emacs-lisp :results output silent
    
  (customize-set-variable 'menu-bar-mode nil)
    
  #+END_SRC
  
- Disable tool bar
  
  #+BEGIN_SRC emacs-lisp :results output silent
  
  (customize-set-variable 'tool-bar-mode nil)
  
  #+END_SRC
  


** EXPLAIN Line numbers

Line numbers, especially relative line numbers are crucial for my
development environment.

#+BEGIN_SRC emacs-lisp :results output silent

  (custom-set-variables
   '(display-line-numbers-width 1)
   '(display-line-numbers-grow-only t)
   '(display-line-numbers-widen nil)
   '(display-line-numbers-width-start nil)
   '(display-line-numbers-type 'visual))

  (global-display-line-numbers-mode)

#+END_SRC



** Highlight current line

Highlighting the current line prevents me to lose focus on the cursor
and also helps me to track cursor while changing windows.

#+BEGIN_SRC emacs-lisp :results output silent

  (global-hl-line-mode t)

#+END_SRC



** Font

#+BEGIN_SRC emacs-lisp :results output silent

(add-to-list 'default-frame-alist '(font . "mononoki Nerd Font-12"))

#+END_SRC



** Show other paren

#+BEGIN_SRC emacs-lisp :results output silent

(show-paren-mode t)

#+END_SRC



** Make prompts shorter

#+BEGIN_SRC emacs-lisp :results output silent

(defalias 'yes-or-no-p 'y-or-n-p)

#+END_SRC


** Indent guides

Indent guides makes buffers easier to read.

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package indent-guide
    :disabled
    :custom
    (indent-guide-delay 0.1)      ; Delay makes delay the guide update to idle
    :config
    (indent-guide-global-mode))

#+END_SRC


** Beacon

Beacon shines your point when changing between buffers.

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package beacon
    :custom
    (beacon-color "#5881d8")
    :config
    (beacon-mode t))

#+END_SRC
 

** Smooth scroll

This package offers a global minor mode which make emacs scroll
smoothly.  It keeps the point away from the top and bottom of the
current buffer's window in order to keep lines of context around the
point visible as much as possible, whilst minimising the frequency of
sudden scroll jumps which are visually confusing.

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package smooth-scrolling
    :config
    (smooth-scrolling-mode 1))

#+END_SRC


** Better Modeline

~doom-modeline~ is my first pic of modelines.

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))

#+END_SRC



** Highlight ~TODO~ comment

Highlighting ~TODO~ items in comments is very useful in my workflow.

~global-hl-todo-mode~ function is not working. So I added a hook to
every buffer change to enable it buffer-local for every buffer.

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package hl-todo
    :config 
    (global-hl-todo-mode))

#+END_SRC




** EXPLAIN Wrapping

#+BEGIN_SRC emacs-lisp :results output silent

  (global-visual-line-mode t)

#+END_SRC



* Files

** Backup files and versioning

~#filename#~ and ~filename~~ files drive me crazy. This centralises
the backup files created as I edit.

#+BEGIN_SRC emacs-lisp :results output silent

  (custom-set-variables 
   '(backup-directory-alist '(("." . ,(concat user-emacs-directory "backup"))))
   '(save-place-file (concat user-emacs-directory "places"))
   '(backup-by-copying t)    ; Don't delink hardlinks
   '(version-control t)      ; Use version numbers on backups
   '(delete-old-versions t)  ; Automatically delete excess backups
   '(kept-new-versions 20)   ; how many of the newest versions to keep
   '(kept-old-versions 5))   ; and how many of the old

#+END_SRC



** Recent files

~recent-mode~ is very powerful package for recent files.

#+BEGIN_SRC emacs-lisp :results output silent

    (custom-set-variables 
     '(recentf-mode t)
     '(recentf-max-menu-items 50)
     '(recentf-max-saved-items 50))

  (add-to-list 'recentf-exclude (expand-file-name "~/.emacs.d/elpa/.*"))

#+END_SRC


** Save point places

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package saveplace
    :custom
    (save-place-mode t "Enable save place mode"))

#+END_SRC



** Uniquify buffer names style

Same file names in different folders must be distinguishable to human
eye without loosing information. Emacs solves this problem with
different styles.

| forward                     | ~bar/mumble/name~         | ~quux/mumble/name~         |
| reverse                     | ~name\mumble\bar~         | ~name\mumble\quux~         |
| post-forward                | ~name~ \vert ~bar/mumble~ | ~name~ \vert ~quux/mumble~ |
| post-forward-angle-brackets | ~name<bar/mumble>~        | ~name<quux/mumble>~        |
| nil                         | ~name~                    | ~name<2>~                  |

I am setting this to ~forward~ which is provided in [[https://github.com/technomancy/better-defaults/blob/master/better-defaults.el][better defaults]].

#+BEGIN_SRC emacs-lisp :results output silent

  (customize-set-variable 'uniquify-buffer-name-style 'forward)

#+END_SRC


* Global keybindings

** ~DEL~ \rightarrow ~C-h~

Backspace key is hard to reach. I swapped it with ~C-h~ which also
backward deletes a char in all shells.

Also I swapped ~M-<DEL>~ to ~M-h~.

#+BEGIN_SRC emacs-lisp :results output silent

(global-set-key (kbd "C-?") 'help-command)
(global-set-key (kbd "M-?") 'mark-paragraph)
(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "M-h") 'backward-kill-word)
  
#+END_SRC

*[[https://www.emacswiki.org/emacs/BackspaceKey][This does not work on Linux Mint.]]*


** CONFIGURE ~C-S-i~ \rightarrow ~S-Tab~

#+BEGIN_SRC emacs-lisp :results output silent



#+END_SRC


** EXPLAIN ~mwim~
  
#+BEGIN_SRC emacs-lisp :results output silent

  (use-package mwim
    :bind (("C-a" . mwim-beginning-of-code-or-line-or-comment)
           ("C-e" . mwim-end-of-code-or-line)))

#+END_SRC


** ~C-w~ to kill word

In default shells ~C-w~ kills the word. 

#+BEGIN_SRC emacs-lisp :results output silent

  (defun normacs/backward-kill-word-or-region (&optional arg)
    "Calls `kill-region' when a region is active and
  `backward-kill-word' otherwise. ARG is passed to
  `backward-kill-word' if no region is active."
    (interactive "p")
    (if (region-active-p)
        ;; call interactively so kill-region handles rectangular selection
        ;; correctly (see https://github.com/syl20bnr/spacemacs/issues/3278)
        (call-interactively #'kill-region)
      (backward-kill-word arg)))

#+END_SRC


#+BEGIN_SRC emacs-lisp :results output silent

  (global-set-key (kbd "C-w") 'normacs/backward-kill-word-or-region)

#+END_SRC


** Buffer list to ~ibuffer~

~ibuffer~ is interactive buffer list extended on default buffer
list. It is listed in [[https://github.com/technomancy/better-defaults/blob/master/better-defaults.el][better defaults package]].


#+BEGIN_SRC emacs-lisp :results output silent

  ;; (global-set-key (kbd "C-x C-b") 'ibuffer)

#+END_SRC

*** Updates

**** <2019-12-28 Sat>

Looks like evil does not work in ibuffer. So it is disabled now.


** CONFIGURE Regex search by default




* Major Modes

** Markdown

Markdown has different implementations like /Github Flavoured
Markdown/, /CommonMark/ etc.

If file is ~README.md~ file. It is highly probable that the file is
for /GitHub/ or /Gitlab/.

#+BEGIN_SRC emacs-lisp :results output silent


  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init 
    (customize-set-variable 'markdown-command "multimarkdown"))

#+END_SRC


** Yaml

#+BEGIN_SRC emacs-lisp :results output silent

(use-package yaml-mode)

#+END_SRC


** CSV

#+BEGIN_SRC emacs-lisp :results output silent

(use-package csv-mode)

#+END_SRC


** CONFIGURE EPUB

- Continious reading

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package nov)

#+END_SRC


** ~sxhkd~

~sxhkd~ is a /Simple X Hotkey Keyboard Deamon/. Its capabilities are
beyond any kind of window manager.

There is no major mode custom package for configuration files for
~sxhkd~ (~sxhkdrc~). But according to [[https://www.reddit.com/r/emacs/comments/6fqj80/is_there_a_sxhkdrc_mode/dik7wn1?utm_source=share&utm_medium=web2x][this]] helpful reddit post it is
easy to create in emacs.

#+BEGIN_SRC emacs-lisp :results output silent

  (define-generic-mode sxhkd-mode
    '(?#)
    '("alt" "Escape" "super" "ctrl" "space" "shift")
    nil
    '("sxhkdrc")
    nil
    "Simple mode for sxhkdrc files.")

#+END_SRC


** Sh

*** Sh files must be executable to do something useful!

  ~executable-make-buffer-file-executable-if-script-p~ function have
  been created for this purpose. It makes the file executable
  depending on it needs to be executable via /first line bang/
  notation in script files. This function added ~after-save-hook~.

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package sh-script
    :config
    (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p))

#+END_SRC

*** Company for shell development

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package company-shell)

#+END_SRC


** JSON

#+BEGIN_SRC emacs-lisp

  (use-package json-mode)

#+END_SRC


* Tools

** ~helm~

~helm~ is extremely powerful narrowing application like ~fzf~ in
vim. It has some drop-in replacement functions like ~recentf~, ~M-x~,
~find-files~.

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package helm
    :custom 
    (helm-allow-mouse t)
    :bind (("C-x C-r" . helm-mini)
           ("C-x b" . helm-mini)
           ("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("M-s o" . helm-occur)
           :map helm-find-files-map
           ("C-w" . helm-find-files-up-one-level))
    :config
    (helm-mode t))

#+END_SRC




** ~which-key~

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package which-key 
    :config 
    (which-key-mode t))

#+END_SRC


** ~undo-tree~

~undo-tree~ package visualizes undo history as a tree for easy
navigation.

I am using ~C-/~ to undo. Appearently ~C-x /~ is a good fit for this
package.

#+BEGIN_SRC emacs-lisp :results output silent

(use-package undo-tree
  :bind ("C-x /" . undo-tree-visualize)
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode t))

#+END_SRC


** Company

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package company
    :hook (after-init . global-company-mode))

#+END_SRC



** CONFIGURE Multiple cursors

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package multiple-cursors)

#+END_SRC


** CONFIGURE ~projectile~

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package projectile)

#+END_SRC



** CONFIGURE ~expand-region~ 

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package expand-region)

#+END_SRC


** ~zzz-to-char~

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package zzz-to-char
    :config
    (global-set-key (kbd "M-z") #'zzz-to-char))

#+END_SRC

** ~regex-tools~

~regex-tools~ is very useful tool to evaluate the regular expressions
and monitoring their captures and results. In case you don't know
Regex drop everything and start to learn it right now. You can thank
me later

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package regex-tool)

#+END_SRC

** Git

*** ~magit~

Magit is an awesome interface to git. Summon it with `C-x g`.

#+BEGIN_SRC emacs-lisp :results output silent

(use-package magit
  :bind ("C-x g" . magit-status))

#+END_SRC


*** ~git-gutter~

Display line changes in gutter based on git history. Enable it everywhere.

#+BEGIN_SRC emacs-lisp :results output silent

(use-package git-gutter
  :config
  (global-git-gutter-mode 't)
  :diminish git-gutter-mode)

#+END_SRC


*** ~git-timemachine~

#+BEGIN_SRC emacs-lisp :results output silent

(use-package git-timemachine)

#+END_SRC


* EXPLAIN Evil

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package evil
    :config
    (evil-mode 1)
    (customize-set-variable 'evil-want-C-u-scroll t)

    (use-package evil-surround
      :config
      (global-evil-surround-mode))

    (use-package evil-org
      :hook (org-mode . evil-org-mode))

    (use-package evil-exchange
      :config
      (evil-exchange-install))

    (use-package evil-replace-with-register
      :config
      (evil-replace-with-register-install))

    (use-package evil-indent-textobject)

    (use-package evil-textobj-entire)

    (use-package evil-better-visual-line
      :config
      (evil-better-visual-line-on))

    (use-package evil-vimish-fold
      :config
      (evil-vimish-fold-mode t))

    (use-package evil-numbers
      :bind (:map evil-normal-state-map
             ("C-c +" . evil-numbers/inc-at-pt)
             ("C-c -" . evil-numbers/dec-at-pt)
             :map evil-visual-state-map
             ("C-c +" . evil-numbers/inc-at-pt)
             ("C-c -" . evil-numbers/dec-at-pt))))

    (use-package evil-args
      :bind (:map evil-inner-text-objects-map
             ("a" . evil-inner-arg)
             :map evil-outer-text-objects-map
             ("a" . evil-outer-arg)
             :map evil-normal-state-map
             ("L" . evil-forward-arg)
             ("H" . evil-backward-arg)
             ("K" . evil-jump-out-args)
             :map evil-motion-state-map
             ("L" . evil-forward-arg)
             ("H" . evil-backward-arg)))

#+END_SRC


* Org

** Setup

*** Default location of Org files

Directory with Org files.
This is just a default location to look for Org files.  There is no need
at all to put your files into this directory.  It is used in the
following situations:

- When a capture template specifies a target file that is not an
  absolute path.  The path will then be interpreted relative to
  ‘org-directory’
- When the value of variable ‘org-agenda-files’ is a single file, any
  relative paths in this file will be taken as relative to
  ‘org-directory’.


#+BEGIN_SRC emacs-lisp :results output silent

  (customize-set-variable 'org-directory "~/doc/org")

#+END_SRC


*** CONFIGURE Shortcut to org directory


*** Quick notes

Default target for storing notes.

Used as a fall back file for org-capture.el, for templates that do not
specify a target file.

#+BEGIN_SRC emacs-lisp :results output silent

  (customize-set-variable 'org-default-notes-file (concat org-directory "/quick.org"))

#+END_SRC



*** TODO Dependencies

#+BEGIN_SRC emacs-lisp :results output silent

  (customize-set-variable 'org-enforce-todo-dependencies t)

#+END_SRC


** Appearance

*** Special bullet characters

Improve the display of bullet points.

#+BEGIN_SRC emacs-lisp :results output silent

  (use-package org-bullets
    :config 
    (customize-set-variable 'org-bullets-bullet-list '("∙"))
    (add-hook 'org-mode-hook 'org-bullets-mode))

#+END_SRC



** Hooks

*** CONFIGURE Disable indent guides

#+BEGIN_SRC emacs-lisp :results output silent



#+END_SRC


** Writing

*** Disable splitting when ~M-RET~  

When this command is used in the middle of a line, the line is split
and the rest of the line becomes the new headline. In order to prevent
splitting, the option is used below.

#+BEGIN_SRC emacs-lisp :results output silent

(customize-set-variable 'org-M-RET-may-split-line '(default . nil))

#+END_SRC


*** Special Ctrl A/E

Non-nil means ~C-a~ and ~C-e~ behave specially in headlines and items

#+BEGIN_SRC emacs-lisp :results output silent

(customize-set-variable 'org-special-ctrl-a/e t)

#+END_SRC


*** Native tab in source blocks

If non-nil, the effect of TAB in a code block is as if it issued in
the language major mode buffer.

#+BEGIN_SRC emacs-lisp :results output silent

(setq org-src-tab-acts-natively t)

#+END_SRC  


*** Startup indented by default

Org does not need indented text below headers. However sometimes
indentation helps to track the text in crowded header
soup. Nevertheless it is extra processing for the machine. So the
~org-indent-mode~ should be used manually to prevent slow Org
experience.

#+BEGIN_SRC emacs-lisp :results output silent

(setq org-startup-indented 'f)

#+END_SRC




** Export

*** ~htmlize~

#+BEGIN_SRC emacs-lisp :results output silent

(use-package htmlize)

#+END_SRC




* MISC

** Fireplace

Even emacs needs to be warm...

#+BEGIN_SRC emacs-lisp :results output silent

(use-package fireplace)

#+END_SRC

#+RESULTS:
