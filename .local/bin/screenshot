#!/usr/bin/env sh

export SCRIPT_VERSION='0.0.1'

SCREENSHOT_DIR="$HOME/pic/screenshot"

usage () {
  echo "$(basename "$0") $SCRIPT_VERSION
Easy screenshots

USAGE:
  $(basename "$0") [OPTIONS] [--] AREA

  AREA: (select|window|all)

OPTIONS:
    -s          Save the output to $SCREENSHOT_DIR if path is not given
    -h          Display this message
    -v          Display script version
"
}

SCREENSHOT_EXEC='maim --bordersize=3 --padding=-3 --quiet --color=0.13,0.92,0.44,1 --tolerance=50'
XCLIP_EXEC='xclip -selection clipboard -t image/png'
NOTIF_EXEC='notify-send --urgency low'
NOTIF_MSG_COPY='Copied'
NOTIF_MSG_SAVE='Copied and saved'

SAVE_PATH="$(printf '%s/%s.png' "$SCREENSHOT_DIR" "$(date +%s)")"

save=false
while getopts "hvs" opt; do
  case $opt in
    s)
      save=true
      ;;
    h)
      usage
      exit 0
      ;;
    v)
      echo "$(basename "$0") -- version $SCRIPT_VERSION"
      exit 0
      ;;
    *)
      printf "\nOption does not exist: %s\n\n" "$OPTARG"
      usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

case $1 in
  select)
    area_param='--select'
    notif_indicator='selection'
    ;;
  all)
    area_param='--'
    notif_indicator='whole screen'
    ;;
  window)
    area_param="--window=$(xdotool getactivewindow)"
    notif_indicator='focused window'
    ;;
  '')
    printf "Area type is missing\n\n"
    usage
    exit 1
    ;;
  *)
    printf "Area type does not exist: %s\n\n" "$1"
    usage
    exit 1
    ;;
esac

if ! $save; then
  $SCREENSHOT_EXEC "$area_param" | \
    $XCLIP_EXEC && $NOTIF_EXEC "$NOTIF_MSG_COPY $notif_indicator"
else
  $SCREENSHOT_EXEC "$area_param" "$SAVE_PATH" && $XCLIP_EXEC < "$SAVE_PATH" && \
    $NOTIF_EXEC "$NOTIF_MSG_SAVE $notif_indicator" "$SAVE_PATH"
fi



# vim: ft=sh
